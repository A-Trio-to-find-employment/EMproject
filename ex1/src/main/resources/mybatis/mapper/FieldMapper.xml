<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.example.demo.mapper.FieldMapper">

   <select id="getCategories" parameterType="String" resultType="Category">
		select cat_id,cat_name from categories where parent_id=#{parent_id}
	</select>

	<select id="countSubCategories" resultType="Integer" parameterType="Integer">
    select count(*) FROM categories where parent_id = #{cat_id}
	</select>
<!-- 특정 카테고리에 속한 책 목록 조회 -->

	<select id="getCategoriesName" parameterType="String" resultType="String">
		select cat_name from categories where cat_id=#{cat_id}
	</select>
	
<!-- 책 상세 정보 조회 -->
<select id="getBookDetail" parameterType="java.lang.Long" resultType="book">
      SELECT isbn, book_title,
        (SELECT LISTAGG(author, ', ') WITHIN GROUP (ORDER BY author) 
         FROM book_author WHERE isbn = book.isbn) AS authors,
        publisher, price, stock,
        TO_CHAR(pub_date, 'YYYY-MM-DD') AS pub_date,
        TO_CHAR(reg_date, 'YYYY-MM-DD') AS reg_date,
        cat_id, image_name
    FROM book
    WHERE isbn = #{isbn, jdbcType=BIGINT}
</select>

<!-- 카테고리 정보 조회 -->
<select id="getCategoryById" parameterType="java.lang.Long" resultType="String">
SELECT (SELECT LISTAGG(c.cat_name, ' > ') WITHIN GROUP (ORDER BY LEVEL DESC) 
        FROM categories c 
        START WITH c.cat_id = bc.cat_id 
        CONNECT BY PRIOR c.parent_id = c.cat_id) AS categoryPath
FROM book b
JOIN book_categories bc ON b.isbn = bc.isbn
WHERE b.isbn = #{isbn, jdbcType=BIGINT}
</select>
<!-- 책을 필터적용해서 정렬해서 보여주는 쿼리 -->
<select id="getorderByBook" parameterType="String" resultType="Book">
    select isbn, book_title,
           (select listagg(author, ', ') within group (order by author)
            from book_author
            where isbn = book.isbn) as authors,
           price,
           publisher,
           pub_date  <!-- 출판 날짜 추가 -->
    from book
    where isbn IN (select isbn from book_categories where cat_id = #{cat_id})
    <choose>
        <when test="sort == 'sales'">
            ORDER BY SALES DESC
        </when>
        <when test="sort == 'review'">
            ORDER BY REVIEW_COUNT DESC
        </when>
        <when test="sort == 'rating'">
            ORDER BY TOTAL_RATING DESC
        </when>
        <otherwise>
            ORDER BY PUB_DATE DESC  <!-- 기본값: 최신순 -->
        </otherwise>
    </choose>
</select>
<update id="buyBook" parameterType="Book">
	update book set stock = #{stock} where isbn = #{isbn}
</update>
<select id="getBookSalesReport" parameterType="StartEndKey" resultType="BookStatistics">
    SELECT * 
	FROM (
    	SELECT rownum rn, a.* 
    	FROM (
        	SELECT 
            	b.isbn, 
            	b.book_title, 
            	COALESCE(SUM(od.quantity), 0) AS total_sales, 
            	COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.quantity ELSE 0 END), 0) AS daily_sales, 
            	COALESCE(SUM(od.subtotal), 0) AS total_revenue, 
            	COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.subtotal ELSE 0 END), 0) AS daily_revenue
        	FROM book b
        	LEFT JOIN orders_detail od ON b.isbn = od.isbn
        	LEFT JOIN orders o ON od.order_id = o.order_id
        	GROUP BY b.isbn, b.book_title
        	ORDER BY total_sales DESC
    	) a 
    	WHERE rownum <![CDATA[<=]]> #{end}  
	) 
	WHERE rn > #{start}  
	ORDER BY rn
</select>
<select id="getBookSalesReportDT" parameterType="StartEndKey" resultType="BookStatistics">
    SELECT * 
	FROM (
    	SELECT rownum rn, a.* 
    	FROM (
        	SELECT 
            	b.isbn, 
            	b.book_title, 
            	COALESCE(SUM(od.quantity), 0) AS total_sales, 
            	COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.quantity ELSE 0 END), 0) AS daily_sales, 
            	COALESCE(SUM(od.subtotal), 0) AS total_revenue, 
            	COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.subtotal ELSE 0 END), 0) AS daily_revenue
        	FROM book b
        	LEFT JOIN orders_detail od ON b.isbn = od.isbn
        	LEFT JOIN orders o ON od.order_id = o.order_id
        	GROUP BY b.isbn, b.book_title
        	ORDER BY daily_sales DESC
    	) a 
    	WHERE rownum <![CDATA[<=]]> #{end}  
	) 
	WHERE rn > #{start}  
	ORDER BY rn
</select>
<select id="getBookSalesReportTR" parameterType="StartEndKey" resultType="BookStatistics">
    SELECT * 
	FROM (
    	SELECT rownum rn, a.* 
    	FROM (
        	SELECT 
            	b.isbn, 
            	b.book_title, 
            	COALESCE(SUM(od.quantity), 0) AS total_sales, 
            	COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.quantity ELSE 0 END), 0) AS daily_sales, 
            	COALESCE(SUM(od.subtotal), 0) AS total_revenue, 
            	COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.subtotal ELSE 0 END), 0) AS daily_revenue
        	FROM book b
        	LEFT JOIN orders_detail od ON b.isbn = od.isbn
        	LEFT JOIN orders o ON od.order_id = o.order_id
        	GROUP BY b.isbn, b.book_title
        	ORDER BY total_revenue DESC
    	) a 
    	WHERE rownum <![CDATA[<=]]> #{end}  
	) 
	WHERE rn > #{start}  
	ORDER BY rn
</select>
<select id="getBookSalesReportDR" parameterType="StartEndKey" resultType="BookStatistics">
    SELECT * 
	FROM (
    	SELECT rownum rn, a.* 
    	FROM (
        	SELECT 
            	b.isbn, 
            	b.book_title, 
            	COALESCE(SUM(od.quantity), 0) AS total_sales, 
            	COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.quantity ELSE 0 END), 0) AS daily_sales, 
            	COALESCE(SUM(od.subtotal), 0) AS total_revenue, 
            	COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.subtotal ELSE 0 END), 0) AS daily_revenue
        	FROM book b
        	LEFT JOIN orders_detail od ON b.isbn = od.isbn
        	LEFT JOIN orders o ON od.order_id = o.order_id
        	GROUP BY b.isbn, b.book_title
        	ORDER BY daily_revenue DESC
    	) a 
    	WHERE rownum <![CDATA[<=]]> #{end}  
	) 
	WHERE rn > #{start}  
	ORDER BY rn
</select>
<select id="getBookSalesSearch" parameterType="StartEndKey" resultType="BookStatistics">
    SELECT * 
    FROM (
        SELECT rownum rn, a.* 
        FROM (
            SELECT 
                b.isbn, 
                b.book_title, 
                COALESCE(SUM(od.quantity), 0) AS total_sales, 
                COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.quantity ELSE 0 END), 0) AS daily_sales, 
                COALESCE(SUM(od.subtotal), 0) AS total_revenue, 
                COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.subtotal ELSE 0 END), 0) AS daily_revenue
            FROM book b
            LEFT JOIN orders_detail od ON b.isbn = od.isbn
            LEFT JOIN orders o ON od.order_id = o.order_id
            WHERE b.book_title LIKE '%' || #{key} || '%'  
            GROUP BY b.isbn, b.book_title
            ORDER BY total_sales DESC  
        ) a 
        WHERE rownum <![CDATA[<=]]> #{end}  
    ) 
    WHERE rn > #{start}  
    ORDER BY rn
</select>
<select id="getBookSalesSearchDT" parameterType="StartEndKey" resultType="BookStatistics">
    SELECT * 
    FROM (
        SELECT rownum rn, a.* 
        FROM (
            SELECT 
                b.isbn, 
                b.book_title, 
                COALESCE(SUM(od.quantity), 0) AS total_sales, 
                COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.quantity ELSE 0 END), 0) AS daily_sales, 
                COALESCE(SUM(od.subtotal), 0) AS total_revenue, 
                COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.subtotal ELSE 0 END), 0) AS daily_revenue
            FROM book b
            LEFT JOIN orders_detail od ON b.isbn = od.isbn
            LEFT JOIN orders o ON od.order_id = o.order_id
            WHERE b.book_title LIKE '%' || #{key} || '%'  
            GROUP BY b.isbn, b.book_title
            ORDER BY daily_sales DESC  
        ) a 
        WHERE rownum <![CDATA[<=]]> #{end}  
    ) 
    WHERE rn > #{start}  
    ORDER BY rn
</select>
<select id="getBookSalesSearchTR" parameterType="StartEndKey" resultType="BookStatistics">
    SELECT * 
    FROM (
        SELECT rownum rn, a.* 
        FROM (
            SELECT 
                b.isbn, 
                b.book_title, 
                COALESCE(SUM(od.quantity), 0) AS total_sales, 
                COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.quantity ELSE 0 END), 0) AS daily_sales, 
                COALESCE(SUM(od.subtotal), 0) AS total_revenue, 
                COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.subtotal ELSE 0 END), 0) AS daily_revenue
            FROM book b
            LEFT JOIN orders_detail od ON b.isbn = od.isbn
            LEFT JOIN orders o ON od.order_id = o.order_id
            WHERE b.book_title LIKE '%' || #{key} || '%'  
            GROUP BY b.isbn, b.book_title
            ORDER BY total_revenue DESC  
        ) a 
        WHERE rownum <![CDATA[<=]]> #{end}  
    ) 
    WHERE rn > #{start}  
    ORDER BY rn
</select>
<select id="getBookSalesSearchDR" parameterType="StartEndKey" resultType="BookStatistics">
    SELECT * 
    FROM (
        SELECT rownum rn, a.* 
        FROM (
            SELECT 
                b.isbn, 
                b.book_title, 
                COALESCE(SUM(od.quantity), 0) AS total_sales, 
                COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.quantity ELSE 0 END), 0) AS daily_sales, 
                COALESCE(SUM(od.subtotal), 0) AS total_revenue, 
                COALESCE(SUM(CASE WHEN o.created_at >= TRUNC(SYSDATE) THEN od.subtotal ELSE 0 END), 0) AS daily_revenue
            FROM book b
            LEFT JOIN orders_detail od ON b.isbn = od.isbn
            LEFT JOIN orders o ON od.order_id = o.order_id
            WHERE b.book_title LIKE '%' || #{key} || '%'  
            GROUP BY b.isbn, b.book_title
            ORDER BY daily_revenue DESC  
        ) a 
        WHERE rownum <![CDATA[<=]]> #{end}  
    ) 
    WHERE rn > #{start}  
    ORDER BY rn
</select>
<select id="getBookCount" resultType="Integer">
	select count(isbn) from book
</select>
<select id="getBookCountSearch" parameterType="String" resultType="Integer">
	select count(isbn) from book where book_title like '%' || #{SEARCH} || '%'
</select>
</mapper>

	




